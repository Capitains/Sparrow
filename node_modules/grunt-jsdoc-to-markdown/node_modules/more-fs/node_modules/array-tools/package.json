{
  "name": "array-tools",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "1.5.0",
  "description": "Useful functions for working with arrays",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/array-tools.git"
  },
  "main": "./lib/array-tools.js",
  "bin": {
    "array-tools": "bin/cli.js"
  },
  "license": "MIT",
  "keywords": [
    "pluck",
    "arrayify",
    "exists",
    "where",
    "findWhere",
    "without",
    "union",
    "commonSequence",
    "unique",
    "spliceWhile"
  ],
  "scripts": {
    "test": "tape test/*.js",
    "lint": "jshint lib/*.js test/*.js; echo",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs -l js -d 1 --no-gfm lib/*.js > README.md; echo",
    "watch": "baldrick --do 'npm run docs' --when lib/*.js --change"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "~0.5.7",
    "tape": "^3"
  },
  "dependencies": {
    "object-tools": "^1.1.0",
    "typical": "^1.0.0"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/array-tools.svg)](https://www.npmjs.org/package/array-tools)\n[![npm module downloads per month](http://img.shields.io/npm/dm/array-tools.svg)](https://www.npmjs.org/package/array-tools)\n[![Build Status](https://travis-ci.org/75lb/array-tools.svg?branch=master)](https://travis-ci.org/75lb/array-tools)\n[![Dependency Status](https://david-dm.org/75lb/array-tools.svg)](https://david-dm.org/75lb/array-tools)\n\n<a name=\"module_array-tools\"></a>\n# array-tools\nUseful functions for working with arrays\n\n**Example**  \n```js\nvar a = require(\"array-tools\");\n```\n\n* [array-tools](#module_array-tools)\n  * [.pluck(arrayOfObjects, ...property)](#module_array-tools.pluck) ⇒ <code>Array</code>\n  * [.pick(arrayOfObjects, ...property)](#module_array-tools.pick) ⇒ <code>Array.&lt;object&gt;</code>\n  * [.arrayify(input)](#module_array-tools.arrayify) ⇒ <code>Array</code>\n  * [.exists(array, value)](#module_array-tools.exists) ⇒ <code>boolean</code>\n  * [.where(arrayOfObjects, query)](#module_array-tools.where) ⇒ <code>Array</code>\n  * [.findWhere(arrayOfObjects, query)](#module_array-tools.findWhere) ⇒ <code>object</code>\n  * [.without(input, toRemove)](#module_array-tools.without) ⇒ <code>Array</code>\n  * [.union(array1, array2, idKey)](#module_array-tools.union) ⇒ <code>Array</code>\n  * [.commonSequence(a, b)](#module_array-tools.commonSequence) ⇒ <code>Array</code>\n  * [.unique(array)](#module_array-tools.unique) ⇒ <code>Array</code>\n  * [.spliceWhile(array, index, test, ...elementN)](#module_array-tools.spliceWhile) ⇒ <code>Array</code>\n  * [.extract(array, query)](#module_array-tools.extract) ⇒ <code>Array</code>\n  * [.flatten()](#module_array-tools.flatten) ⇒ <code>Array</code>\n  * [.sortBy(arrayOfObject, ...columns)](#module_array-tools.sortBy) ⇒ <code>array</code>\n\n<a name=\"module_array-tools.pluck\"></a>\n## a.pluck(arrayOfObjects, ...property) ⇒ <code>Array</code>\nPlucks the value of the specified property from each object in the input array\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>arrayOfObjects</td><td><code>Array.&lt;object&gt;</code></td><td>the input array of objects</td>\n    </tr><tr>\n    <td>...property</td><td><code>string</code></td><td>the property(s) to pluck</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> var data = [\n    {one: 1, two: 2},\n    {two: \"two\"},\n    {one: \"one\", two: \"zwei\"},\n];\n> a.pluck(data, \"one\");\n[ 1, 'one' ]\n> a.pluck(data, \"two\");\n[ 2, 'two', 'zwei' ]\n> a.pluck(data, \"one\", \"two\");\n[ 1, 'two', 'one' ]\n```\n<a name=\"module_array-tools.pick\"></a>\n## a.pick(arrayOfObjects, ...property) ⇒ <code>Array.&lt;object&gt;</code>\nreturn a copy of the input `arrayOfObjects` containing objects having only the cherry-picked properties\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>arrayOfObjects</td><td><code>Array.&lt;object&gt;</code></td><td>the input</td>\n    </tr><tr>\n    <td>...property</td><td><code>string</code></td><td>the properties to include in the result</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> data = [\n    { one: \"un\", two: \"deux\", three: \"trois\" },\n    { two: \"two\", one: \"one\" },\n    { four: \"quattro\" },\n    { two: \"zwei\" }\n]\n> a.pick(data, \"two\")\n[ { two: 'deux' },\n  { two: 'two' },\n  { two: 'zwei' } ]\n```\n<a name=\"module_array-tools.arrayify\"></a>\n## a.arrayify(input) ⇒ <code>Array</code>\nTakes input and guarantees an array back. Result can be one of three things:\n\n- puts a single scalar in an array\n- converts array-like object (e.g. `arguments`) to a real array\n- converts `null` or `undefined` to an empty array\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>input</td><td><code>*</code></td><td>the input value to convert to an array</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> a.arrayify(null)\n[]\n> a.arrayify(0)\n[ 0 ]\n> a.arrayify([ 1, 2 ])\n[ 1, 2 ]\n> function f(){ return a.arrayify(arguments); }\n> f(1,2,3)\n[ 1, 2, 3 ]\n```\n<a name=\"module_array-tools.exists\"></a>\n## a.exists(array, value) ⇒ <code>boolean</code>\nreturns true if a value, or nested object value exists in an array\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>array</td><td><code>Array</code></td><td>the array to search</td>\n    </tr><tr>\n    <td>value</td><td><code>*</code></td><td>the value to search for</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> a.exists([ 1, 2, 3 ], 2)\ntrue\n> a.exists([ { result: false }, { result: false } ], { result: true })\nfalse\n> a.exists([ { result: true }, { result: false } ], { result: true })\ntrue\n> a.exists([ { result: true }, { result: true } ], { result: true })\ntrue\n```\n<a name=\"module_array-tools.where\"></a>\n## a.where(arrayOfObjects, query) ⇒ <code>Array</code>\nreturns an array containing items from `arrayOfObjects` where key/value pairs \nfrom `query` are matched identically\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>arrayOfObjects</td><td><code>Array</code></td><td>the array to search</td>\n    </tr><tr>\n    <td>query</td><td><code>query</code></td><td>an object containing the key/value pairs you want to match</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n> a.where(dudes, { age: 8})\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 } ]\n```\n<a name=\"module_array-tools.findWhere\"></a>\n## a.findWhere(arrayOfObjects, query) ⇒ <code>object</code>\nreturns the first item from `arrayOfObjects` where key/value pairs \nfrom `query` are matched identically\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>arrayOfObjects</td><td><code>Array</code></td><td>the array to search</td>\n    </tr><tr>\n    <td>query</td><td><code>query</code></td><td>an object containing the key/value pairs you want to match</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n> a.findWhere(dudes, { age: 8})\n{ name: 'Jim', age: 8 }\n```\n<a name=\"module_array-tools.without\"></a>\n## a.without(input, toRemove) ⇒ <code>Array</code>\nReturns the input minus the specified values.\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>input</td><td><code>Array</code></td><td>the input array</td>\n    </tr><tr>\n    <td>toRemove</td><td><code>*</code></td><td>a single, or array of values to omit</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> a.without([ 1, 2, 3 ], 2)\n[ 1, 3 ]\n> a.without([ 1, 2, 3 ], [ 2, 3 ])\n[ 1 ]\n```\n<a name=\"module_array-tools.union\"></a>\n## a.union(array1, array2, idKey) ⇒ <code>Array</code>\nmerge two arrays into a single array of unique values\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>array1</td><td><code>Array</code></td><td>First array</td>\n    </tr><tr>\n    <td>array2</td><td><code>Array</code></td><td>Second array</td>\n    </tr><tr>\n    <td>idKey</td><td><code>string</code></td><td>the unique ID property name</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> var array1 = [ 1, 2 ], array2 = [ 2, 3 ];\n> a.union(array1, array2)\n[ 1, 2, 3 ]\n> var array1 = [ { id: 1 }, { id: 2 } ], array2 = [ { id: 2 }, { id: 3 } ];\n> a.union(array1, array2)\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n> var array2 = [ { id: 2, blah: true }, { id: 3 } ]\n> a.union(array1, array2)\n[ { id: 1 },\n  { id: 2 },\n  { id: 2, blah: true },\n  { id: 3 } ]\n> a.union(array1, array2, \"id\")\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n```\n<a name=\"module_array-tools.commonSequence\"></a>\n## a.commonSequence(a, b) ⇒ <code>Array</code>\nReturns the initial elements which both input arrays have in common\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>a</td><td><code>Array</code></td><td>first array to compare</td>\n    </tr><tr>\n    <td>b</td><td><code>Array</code></td><td>second array to compare</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> a.commonSequence([1,2,3], [1,2,4])\n[ 1, 2 ]\n```\n<a name=\"module_array-tools.unique\"></a>\n## a.unique(array) ⇒ <code>Array</code>\nreduces an array to unique values\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>array</td><td><code>Array</code></td><td>input array</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> n = [1,6,6,7,1]\n[ 1, 6, 6, 7, 1 ]\n> a.unique(n)\n[ 1, 6, 7 ]\n```\n<a name=\"module_array-tools.spliceWhile\"></a>\n## a.spliceWhile(array, index, test, ...elementN) ⇒ <code>Array</code>\nsplice from `index` until `test` fails\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>array</td><td><code>Array</code></td><td>the input array</td>\n    </tr><tr>\n    <td>index</td><td><code>number</code></td><td>the position to begin splicing from</td>\n    </tr><tr>\n    <td>test</td><td><code>RegExp</code></td><td>the test to continue splicing while true</td>\n    </tr><tr>\n    <td>...elementN</td><td><code>*</code></td><td>the elements to add to the array</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n> letters = [\"a\", \"a\", \"b\"]\n[ 'a', 'a', 'b' ]\n> a.spliceWhile(letters, 0, /a/, \"x\")\n[ 'a', 'a' ]\n> letters\n[ 'x', 'b' ]\n```\n<a name=\"module_array-tools.extract\"></a>\n## a.extract(array, query) ⇒ <code>Array</code>\nRemoves items from `array` which satisfy the query. Modifies the input array, returns the extracted.\n\n**Returns**: <code>Array</code> - the extracted items.  \n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>array</td><td><code>Array</code></td><td>the input array, modified directly</td>\n    </tr><tr>\n    <td>query</td><td><code>function</code> | <code>object</code></td><td>Per item in the array, if either the function returns truthy or the exists query is satisfied, the item is extracted</td>\n    </tr>\n  </tbody>\n</table>\n\n<a name=\"module_array-tools.flatten\"></a>\n## a.flatten() ⇒ <code>Array</code>\nflatten an array of arrays into a single array\n\n**Since**: 1.4.0  \n**Todo**\n\n- document\n\n**Example**  \n```js\n> numbers = [ 1, 2, [ 3, 4 ], 5 ]\n> a.flatten(numbers)\n[ 1, 2, 3, 4, 5 ]\n```\n<a name=\"module_array-tools.sortBy\"></a>\n## a.sortBy(arrayOfObject, ...columns) ⇒ <code>array</code>\nSort an array of objects by one or more fields\n\n\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>arrayOfObject</td><td><code>array</code></td><td>input array</td>\n    </tr><tr>\n    <td>...columns</td><td><code>string</code></td><td>column names to sort by</td>\n    </tr>\n  </tbody>\n</table>\n\n**Example**  \n```js\n>  var fixture = [\n    { a: 4, b: 1, c: 1},\n    { a: 4, b: 3, c: 1},\n    { a: 2, b: 2, c: 3},\n    { a: 2, b: 2, c: 2},\n    { a: 1, b: 3, c: 4},\n    { a: 1, b: 1, c: 4},\n    { a: 1, b: 2, c: 4},\n    { a: 3, b: 3, c: 3},\n    { a: 4, b: 3, c: 1} \n];\n> a.sortBy(fixture, \"a\", \"b\", \"c\")\n[ { a: 1, b: 1, c: 4 },\n  { a: 1, b: 2, c: 4 },\n  { a: 1, b: 3, c: 4 },\n  { a: 2, b: 2, c: 2 },\n  { a: 2, b: 2, c: 3 },\n  { a: 3, b: 3, c: 3 },\n  { a: 4, b: 1, c: 1 },\n  { a: 4, b: 3, c: 1 },\n  { a: 4, b: 3, c: 1 } ]\n```\n\n\n--\n\n*documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown)*.\n\n&copy; 2015 Lloyd Brookes <75pound@gmail.com>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/array-tools/issues"
  },
  "_id": "array-tools@1.5.0",
  "_from": "array-tools@^1.0.6"
}
