{
  "name": "array-tools",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "1.3.0",
  "description": "Useful functions for working with arrays",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/array-tools.git"
  },
  "main": "./lib/array-tools.js",
  "bin": {
    "array-tools": "bin/cli.js"
  },
  "keywords": [
    "pluck",
    "arrayify",
    "exists",
    "where",
    "findWhere",
    "without",
    "union",
    "commonSequence",
    "unique",
    "spliceWhile"
  ],
  "scripts": {
    "test": "tape test/*.js",
    "lint": "jshint lib/*.js test/*.js; echo",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "watch": "baldrick --do 'npm run docs' --when lib/*.js --change"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "^0.3.0",
    "tape": "^2.13.2"
  },
  "dependencies": {
    "object-tools": "^1.1.0",
    "typical": "^1.0.0"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/array-tools.svg)](https://www.npmjs.org/package/array-tools)\n[![npm module downloads per month](http://img.shields.io/npm/dm/array-tools.svg)](https://www.npmjs.org/package/array-tools)\n[![Build Status](https://travis-ci.org/75lb/array-tools.svg?branch=master)](https://travis-ci.org/75lb/array-tools)\n[![Dependency Status](https://david-dm.org/75lb/array-tools.svg)](https://david-dm.org/75lb/array-tools)\n\n<a name=\"module_array-tools\"></a>\n#array-tools\nUseful functions for working with arrays\n\n**Example**  \n```js\nvar a = require(\"array-tools\");\n```\n\n**Members**\n\n* [a.pluck(arrayOfObjects, ...property)](#module_array-tools.pluck)\n* [a.pick(arrayOfObjects, ...property)](#module_array-tools.pick)\n* [a.arrayify(input)](#module_array-tools.arrayify)\n* [a.exists(array, value)](#module_array-tools.exists)\n* [a.where(arrayOfObjects, query)](#module_array-tools.where)\n* [a.findWhere(arrayOfObjects, query)](#module_array-tools.findWhere)\n* [a.without(input, toRemove)](#module_array-tools.without)\n* [a.union(array1, array2, idKey)](#module_array-tools.union)\n* [a.commonSequence(a, b)](#module_array-tools.commonSequence)\n* [a.unique(array)](#module_array-tools.unique)\n* [a.spliceWhile(array, index, test, ...elementN)](#module_array-tools.spliceWhile)\n* [a.extract(array, callback)](#module_array-tools.extract)\n\n<a name=\"module_array-tools.pluck\"></a>\n##a.pluck(arrayOfObjects, ...property)\nPlucks the value of the specified property from each object in the input array\n\n**Params**\n\n- arrayOfObjects `Array.<Object>` - the input array of objects\n- ...property `string` - the property(s) to pluck\n\n**Returns**: `Array`  \n**Example**  \n```js\n> var data = [\n...     {one: 1, two: 2},\n...     {two: \"two\"},\n...     {one: \"one\", two: \"zwei\"},\n... ];\nundefined\n> a.pluck(data, \"one\");\n[ 1, 'one' ]\n> a.pluck(data, \"two\");\n[ 2, 'two', 'zwei' ]\n> a.pluck(data, \"one\", \"two\");\n[ 1, 'two', 'one' ]\n```\n\n<a name=\"module_array-tools.pick\"></a>\n##a.pick(arrayOfObjects, ...property)\nreturn a copy of the input `arrayOfObjects` containing objects having only the cherry-picked properties\n\n**Params**\n\n- arrayOfObjects `Array.<object>` - the input\n- ...property `string` - the properties to include in the result\n\n**Returns**: `Array.<object>`  \n**Example**  \n```js\n> data = [\n    { one: \"un\", two: \"deux\", three: \"trois\" },\n    { two: \"two\", one: \"one\" },\n    { four: \"quattro\" },\n    { two: \"zwei\" }\n]\n> a.pick(data, \"two\")\n[ { two: 'deux' },\n  { two: 'two' },\n  { two: 'zwei' } ]\n```\n\n<a name=\"module_array-tools.arrayify\"></a>\n##a.arrayify(input)\nTakes input and guarantees an array back. Result can be one of three things:\n\n- puts a single scalar in an array\n- converts array-like object (e.g. `arguments`) to a real array\n- converts `null` or `undefined` to an empty array\n\n**Params**\n\n- input `*` - the input value to convert to an array\n\n**Returns**: `Array`  \n**Example**  \n```js\n> a.arrayify(null)\n[]\n> a.arrayify(0)\n[ 0 ]\n> a.arrayify([ 1, 2 ])\n[ 1, 2 ]\n> function f(){ return a.arrayify(arguments); }\nundefined\n> f(1,2,3)\n[ 1, 2, 3 ]\n```\n\n<a name=\"module_array-tools.exists\"></a>\n##a.exists(array, value)\nreturns true if a value, or nested object value exists in an array\n\n**Params**\n\n- array `Array` - the array to search\n- value `*` - the value to search for\n\n**Returns**: `boolean`  \n**Example**  \n```js\n> a.exists([ 1, 2, 3 ], 2)\ntrue\n> a.exists([ { result: false }, { result: false } ], { result: true })\nfalse\n> a.exists([ { result: true }, { result: false } ], { result: true })\ntrue\n> a.exists([ { result: true }, { result: true } ], { result: true })\ntrue\n```\n\n<a name=\"module_array-tools.where\"></a>\n##a.where(arrayOfObjects, query)\nreturns an array containing items from `arrayOfObjects` where key/value pairs \nfrom `query` are matched identically\n\n**Params**\n\n- arrayOfObjects `Array` - the array to search\n- query `query` - an object containing the key/value pairs you want to match\n\n**Returns**: `Array`  \n**Example**  \n```js\n> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n> a.where(dudes, { age: 8})\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 } ]\n```\n\n<a name=\"module_array-tools.findWhere\"></a>\n##a.findWhere(arrayOfObjects, query)\nreturns the first item from `arrayOfObjects` where key/value pairs \nfrom `query` are matched identically\n\n**Params**\n\n- arrayOfObjects `Array` - the array to search\n- query `query` - an object containing the key/value pairs you want to match\n\n**Returns**: `Object`  \n**Example**  \n```js\n> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n> a.findWhere(dudes, { age: 8})\n{ name: 'Jim', age: 8 }\n```\n\n<a name=\"module_array-tools.without\"></a>\n##a.without(input, toRemove)\nReturns the input minus the specified values.\n\n**Params**\n\n- input `Array` - the input array\n- toRemove `*` - a single, or array of values to omit\n\n**Returns**: `Array`  \n**Example**  \n```js\n> a.without([ 1, 2, 3 ], 2)\n[ 1, 3 ]\n> a.without([ 1, 2, 3 ], [ 2, 3 ])\n[ 1 ]\n```\n\n<a name=\"module_array-tools.union\"></a>\n##a.union(array1, array2, idKey)\nmerge two arrays into a single array of unique values\n\n**Params**\n\n- array1 `Array` - First array\n- array2 `Array` - Second array\n- idKey `string` - the unique ID property name\n\n**Returns**: `Array`  \n**Example**  \n```js\n> var array1 = [ 1, 2 ], array2 = [ 2, 3 ];\nundefined\n> a.union(array1, array2)\n[ 1, 2, 3 ]\n> var array1 = [ { id: 1 }, { id: 2 } ], array2 = [ { id: 2 }, { id: 3 } ];\nundefined\n> a.union(array1, array2)\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n> var array2 = [ { id: 2, blah: true }, { id: 3 } ]\nundefined\n> a.union(array1, array2)\n[ { id: 1 },\n  { id: 2 },\n  { id: 2, blah: true },\n  { id: 3 } ]\n> a.union(array1, array2, \"id\")\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n```\n\n<a name=\"module_array-tools.commonSequence\"></a>\n##a.commonSequence(a, b)\nReturns the initial elements which both input arrays have in common\n\n**Params**\n\n- a `Array` - first array to compare\n- b `Array` - second array to compare\n\n**Returns**: `Array`  \n**Example**  \n```js\n> a.commonSequence([1,2,3], [1,2,4])\n[ 1, 2 ]\n```\n\n<a name=\"module_array-tools.unique\"></a>\n##a.unique(array)\nreduces an array to unique values\n\n**Params**\n\n- array `Array` - input array\n\n**Returns**: `Array`  \n**Example**  \n```js\n> n = [1,6,6,7,1]\n[ 1, 6, 6, 7, 1 ]\n> a.unique(n)\n[ 1, 6, 7 ]\n```\n\n<a name=\"module_array-tools.spliceWhile\"></a>\n##a.spliceWhile(array, index, test, ...elementN)\nsplice from `index` until `test` fails\n\n**Params**\n\n- array `Array` - the input array\n- index `number` - the position to begin splicing from\n- test `RegExp` - the test to continue splicing while true\n- ...elementN `*` - the elements to add to the array\n\n**Returns**: `Array`  \n**Example**  \n```js\n> letters = [\"a\", \"a\", \"b\"]\n[ 'a', 'a', 'b' ]\n> a.spliceWhile(letters, 0, /a/, \"x\")\n[ 'a', 'a' ]\n> letters\n[ 'x', 'b' ]\n```\n\n<a name=\"module_array-tools.extract\"></a>\n##a.extract(array, callback)\nRemoves items from `array` which pass the `callback` test. Modifies the input array, returns the extracted.\n\n**Params**\n\n- array `Array` - the input array, modified directly\n- callback `function` - called on each item in `array`. Those which return a truthy value are extracted.\n\n**Returns**: `Array` - the extracted items.  \n\n\n*documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown)*.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/array-tools/issues"
  },
  "_id": "array-tools@1.3.0",
  "_from": "array-tools@~1.3"
}
