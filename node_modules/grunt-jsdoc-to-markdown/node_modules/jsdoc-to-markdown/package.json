{
  "name": "jsdoc-to-markdown",
  "author": {
    "name": "Lloyd Brookes"
  },
  "version": "0.5.11",
  "description": "Markdown API documentation generator, good for Github projects",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/jsdoc-to-markdown"
  },
  "main": "lib/jsdoc-to-markdown.js",
  "files": [
    "bin",
    "lib",
    "LICENSE"
  ],
  "scripts": {
    "test": "tape test/*.js",
    "render": "node test/fixture/render.js; echo",
    "docs": "node bin/cli.js -t jsdoc2md/README.hbs lib/jsdoc-to-markdown.js > README.md; echo ",
    "watch": "baldrick --do 'npm run docs' --when test/input/*/*.js partials/* --change --speak",
    "lint": "jshint bin/*.js lib/*.js test/*.js; echo",
    "index": "jsdoc2md test/fixture/input/**/*.js -v > test/fixture/output/all-with-index.md; echo",
    "templates": "node test/fixture/templates.js; echo",
    "all": "npm run render && npm run docs && npm run index && npm run templates;"
  },
  "bin": {
    "jsdoc2md": "bin/cli.js"
  },
  "keywords": [
    "handlebars",
    "jsdoc",
    "markdown",
    "generator"
  ],
  "dependencies": {
    "command-line-args": "~0.5.0",
    "console-dope": "~0.3.3",
    "dmd": "~0.2.10",
    "jsdoc-parse": "~0.2.7",
    "more-fs": "~0.5.0",
    "typical": "^1.0.0"
  },
  "devDependencies": {
    "tape": "^3"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/jsdoc-to-markdown.svg)](https://www.npmjs.org/package/jsdoc-to-markdown)\n[![npm module downloads per month](http://img.shields.io/npm/dm/jsdoc-to-markdown.svg)](https://www.npmjs.org/package/jsdoc-to-markdown)\n[![Build Status](https://travis-ci.org/75lb/jsdoc-to-markdown.svg?branch=master)](https://travis-ci.org/75lb/jsdoc-to-markdown)\n[![Dependency Status](https://david-dm.org/75lb/jsdoc-to-markdown.svg)](https://david-dm.org/75lb/jsdoc-to-markdown)\n![Analytics](https://ga-beacon.appspot.com/UA-27725889-32/jsdoc-to-markdown/README.md?pixel)\n\n# Feedback please!\nI am close to finishing the next version, so feedback is welcome at this point!\n\nInstall the preview release:\n\n`$ npm install -g jsdoc-to-markdown@next`\n\ntry it for yourself: \n\n`$ jsdoc2md your-code.js`\n\ntake a look at, and experiment with some new options:\n\n`$ jsdoc2md --help`\n\nAnyway, back to the regular documentation: \n\n# jsdoc-to-markdown\n[jsdoc](http://usejsdoc.org) documented source code in, markdown out.\n\nThis module connects the output of [jsdoc-parse](https://github.com/75lb/jsdoc-parse) to the input of [dmd](https://github.com/75lb/dmd). For information about the markdown output, customising templates etc. please read the [dmd](https://github.com/75lb/dmd) docs. \n\n## Synopsis\nwrite documented code:\n```js\n/**\na quite wonderful function\n@param {object} - privacy gown\n@param {object} - security\n@returns {survival}\n*/\nfunction protection(cloak, dagger){}\n```\n\nget markdown docs: \n```\n$ jsdoc2md example/function.js\n\n# protection(cloak, dagger)\na quite wonderful function\n\n**Params**\n\n- cloak `object` - privacy gown\n- dagger `object` - security\n\n**Returns**: `survival`\n```\n\nthis command achieves the same result: \n```sh\n$ jsdoc-parse example/function.js | dmd\n```\n\n## Examples\nThese projects have readme files rendered by `jsdoc2md`:\n* [handbrake-js](https://github.com/75lb/handbrake-js) (exports an object with inner class)\n* [array-tools](https://github.com/75lb/array-tools) (exports a object)\n* [file-set](https://github.com/75lb/file-set) (exports a class)\n* [command-line-args](https://github.com/75lb/command-line-args)  (exports a class)\n\n## Compatible Platforms\nTested on Mac OSX, Linux, Windows 8.1 and Windows XP.\n\n## Usage\nDocument your source code using [correct jsdoc syntax](http://usejsdoc.org), then run it through `jsdoc2md`.\n\n### Command-line tool\nInstall `jsdoc2md` globally:\n```sh\n$ npm install -g jsdoc-to-markdown\n```\n\nOptions:\n```\n$ jsdoc2md -h\n\n  jsdoc-to-markdown\n  Markdown API documentation generator, good for Github projects\n\n  Usage\n  $ jsdoc2md [<options>] <source_files>\n\n  --src <array>             A list of javascript source files or glob expressions\n  -t, --template <string>   A custom handlebars template to insert the rendered documentation into\n  -j, --json                Output the parsed jsdoc data only\n  -v, --verbose             More verbose error reporting\n  -h, --help                Print usage information\n  --private                 Include symbols marked @private in the output\n  -s, --stats               Print a few stats about the doclets parsed.\n  --heading-depth <number>  root heading depth to begin the documentation from, defaults to 1 (`#`).\n  -p, --plugin <array>      Use an installed package containing helper and/or partial overrides\n  --helper <array>          handlebars helper files to override or extend the default set\n  --partial <array>         handlebars partial files to override or extend the default set\n```\n\nSome typical use cases: \n\n```sh\n$ # dump everything you have into a single file\n$ jsdoc src/**/*.js > api.md\n```\n\n```sh\n$ # split into separate files\n$ jsdoc src/main-module.js > main-module.md\n$ jsdoc src/important-class.js > important-class.md\n```\n\n```sh\n$ # embed documentation into a template you made\n$ jsdoc src/**/*.js --template readme.hbs > README.md\n```\n\n### Bundled with your project\n#### As an `npm run` task\n```sh\n$ npm install jsdoc-to-markdown --save-dev\n```\n\nThen add a `docs` build script to your `package.json`, e.g.:\n```json\n{\n  \"name\": \"my-web-app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"docs\": \"jsdoc2md lib/*.js > api.md\"\n  }\n}\n```\nDocs are generated like so:\n\n```sh\n$ npm run docs\n```\n\n#### As a grunt plug-in\nSee [grunt-jsdoc-to-markdown](https://github.com/75lb/grunt-jsdoc-to-markdown).\n\n#### As a gulp task\nCurrently, the most reliable and natural way of using jsdoc2md with gulp. If your source code contains `@module` tags, use this method *only* ([reason](https://github.com/75lb/gulp-jsdoc-to-markdown#warning)). You should only need to edit `src`, `dest` and `options`: \n\n```js\nvar jsdoc2md = require(\"jsdoc-to-markdown\");\nvar gutil = require(\"gulp-util\");\nvar fs = require(\"fs\");\n\ngulp.task(\"docs\", function(done){\n    var src = \"lib/**/*.js\";\n    var dest = \"api.md\";\n    var options = {};\n    \n    gutil.log(\"writing documentation to \" + dest);\n    jsdoc2md.render(src, options)\n        .on(\"error\", function(err){\n            gutil.log(gutil.colors.red(\"jsdoc2md failed\"), err.message);\n        })\n        .pipe(fs.createWriteStream(dest));\n});\n```\n\n#### As a gulp plug-in\nSee [gulp-jsdoc-to-markdown](https://github.com/75lb/gulp-jsdoc-to-markdown).\n\n### Library\n**Example**  \n\n```js\nvar jsdoc2md = require(\"jsdoc-to-markdown\");\n```\n\n<a name=\"module_jsdoc-to-markdown.render\"></a>\n#### jsdoc2md.render(src, options)\nTransforms jsdoc into markdown documentation.\n\n**Params**\n\n- src `string` | `Array.<string>` - The javascript source file(s).  \n- options `object` - The render options  \n  - \\[template\\] `string` - A custom handlebars template to insert the rendered documentation into.  \n  - \\[json\\] `boolean` - Output the parsed jsdoc data only  \n  - \\[private\\] `boolean` - Include symbols marked @private in the output  \n  - \\[stats\\] `boolean` - Print a few stats about the doclets parsed  \n  - \\[heading-depth\\] `number` - root heading depth, defaults to 1 (`#`)  \n  - \\[plugin\\] `string` | `Array.<string>` - Use an installed package containing helper and/or partial overrides  \n  - \\[helper\\] `string` | `Array.<string>` - handlebars helper files to override or extend the default set  \n  - \\[partial\\] `string` | `Array.<string>` - handlebars partial files to override or extend the default set  \n\n**Returns**: `stream` - A transform stream containing the rendered markdown  \n**Example**  \nTwo ways to use `render`. Either pass in filepaths (`**` glob matching supported) of javascript source files:\n```js\n> jsdoc2md.render(\"lib/*.js\").pipe(process.stdout);\n```\nor pipe in source code from another source:\n```js\n> fs.createReadStream(\"lib/main.js\").pipe(jsdoc2md.render()).pipe(process.stdout);\n```\noutput looks something like: \n```\ngenerates:\n```markdown\n# jsdoc-to-markdown\n**Members**\n[jsdoc2md.render(sourceFiles, options)](#module_jsdoc-to-markdown.render)\n[jsdoc2md.createRenderStream(options)](#module_jsdoc-to-markdown.createRenderStream)\n\n<a name=\"module_jsdoc-to-markdown.render\"></a>\n## jsdoc2md.render(sourceFiles, options)\nRenders the jsdoc documentation from the specified source files as markdown.\n**Params**\n\n- sourceFiles `string` | `Array.<string>` - The javascript source file(s) - required.\n- options `object` - The render options\n  - [template] `string` - A handlebars template to insert your documentation into.\n  - [json] `boolean` - Return the JSON template data only\n  - [stats] `boolean` - Return a few stats about the doclets parsed\n  - [private] `boolean` - Include symbols marked @private in the output\n  - [heading-depth] `number` - Root heading depth, defaults to 1.\n**Returns**: `stream` - A readable stream containing the rendered markdown\n\netc.\netc.\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/jsdoc-to-markdown/issues"
  },
  "_id": "jsdoc-to-markdown@0.5.11",
  "_from": "jsdoc-to-markdown@~0.5"
}
